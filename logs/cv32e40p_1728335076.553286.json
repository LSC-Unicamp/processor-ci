{
    "name": "cv32e40p",
    "folder": "cv32e40p",
    "sim_files": [
        "bhv/cv32e40p_tb_wrapper.sv",
        "example_tb/core/amo_shim.sv",
        "example_tb/core/cv32e40p_fp_wrapper.sv",
        "example_tb/core/cv32e40p_random_interrupt_generator.sv",
        "example_tb/core/cv32e40p_tb_subsystem.sv",
        "example_tb/core/dp_ram.sv",
        "example_tb/core/mm_ram.sv",
        "example_tb/core/riscv_gnt_stall.sv",
        "example_tb/core/riscv_rvalid_stall.sv",
        "example_tb/core/tb_top.sv",
        "example_tb/core/include/perturbation_pkg.sv",
        "scripts/riscv_isa_formal/verif/constraints.sv",
        "scripts/riscv_isa_formal/verif/core_checker.sv",
        "scripts/riscv_isa_formal/verif/io.sv",
        "scripts/riscv_isa_formal/verif/other_bindings.sv",
        "scripts/riscv_isa_formal/verif/vips/obi_dmem.sv",
        "scripts/riscv_isa_formal/verif/vips/obi_imem.sv",
        "scripts/slec/tb_src/cv32e40p_bind2.sv",
        "scripts/slec/tb_src/data_assert2.sv",
        "scripts/slec/tb_src/insn_assert2.sv"
    ],
    "files": [],
    "include_dirs": [],
    "repository": "https://github.com/openhwgroup/cv32e40p",
    "top_module": "",
    "extra_flags": [],
    "language_version": "2005",
    "modules": [
        {
            "module": "gated_clk_cell",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl/gated_clk_cell.v"
        },
        {
            "module": "pa_fdsu_ctrl",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ctrl.v"
        },
        {
            "module": "pa_fdsu_ff1",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ff1.v"
        },
        {
            "module": "pa_fdsu_pack_single",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_pack_single.v"
        },
        {
            "module": "pa_fdsu_prepare",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_prepare.v"
        },
        {
            "module": "pa_fdsu_round_single",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_round_single.v"
        },
        {
            "module": "pa_fdsu_special",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_special.v"
        },
        {
            "module": "pa_fdsu_srt_single",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_srt_single.v"
        },
        {
            "module": "pa_fdsu_top",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_top.v"
        },
        {
            "module": "pa_fpu_dp",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_dp.v"
        },
        {
            "module": "pa_fpu_frbus",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_frbus.v"
        },
        {
            "module": "pa_fpu_src_type",
            "file": "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_src_type.v"
        },
        {
            "module": "cv32e40p_apu_tracer",
            "file": "bhv/cv32e40p_apu_tracer.sv"
        },
        {
            "module": "cv32e40p_core_log",
            "file": "bhv/cv32e40p_core_log.sv"
        },
        {
            "module": "cv32e40p_rvfi",
            "file": "bhv/cv32e40p_rvfi.sv"
        },
        {
            "module": "cv32e40p_rvfi_trace",
            "file": "bhv/cv32e40p_rvfi_trace.sv"
        },
        {
            "module": "cv32e40p_clock_gate",
            "file": "bhv/cv32e40p_sim_clock_gate.sv"
        },
        {
            "module": "cv32e40p_tb_wrapper",
            "file": "bhv/cv32e40p_tb_wrapper.sv"
        },
        {
            "module": "cv32e40p_tracer",
            "file": "bhv/cv32e40p_tracer.sv"
        },
        {
            "module": "needs",
            "file": "example_tb/core/amo_shim.sv"
        },
        {
            "module": "amo_shim",
            "file": "example_tb/core/amo_shim.sv"
        },
        {
            "module": "cv32e40p_fp_wrapper",
            "file": "example_tb/core/cv32e40p_fp_wrapper.sv"
        },
        {
            "module": "cv32e40p_random_interrupt_generator",
            "file": "example_tb/core/cv32e40p_random_interrupt_generator.sv"
        },
        {
            "module": "cv32e40p_tb_subsystem",
            "file": "example_tb/core/cv32e40p_tb_subsystem.sv"
        },
        {
            "module": "dp_ram",
            "file": "example_tb/core/dp_ram.sv"
        },
        {
            "module": "to",
            "file": "example_tb/core/mm_ram.sv"
        },
        {
            "module": "mm_ram",
            "file": "example_tb/core/mm_ram.sv"
        },
        {
            "module": "for",
            "file": "example_tb/core/riscv_gnt_stall.sv"
        },
        {
            "module": "riscv_gnt_stall",
            "file": "example_tb/core/riscv_gnt_stall.sv"
        },
        {
            "module": "code",
            "file": "example_tb/core/riscv_gnt_stall.sv"
        },
        {
            "module": "riscv_rvalid_stall",
            "file": "example_tb/core/riscv_rvalid_stall.sv"
        },
        {
            "module": "code",
            "file": "example_tb/core/riscv_rvalid_stall.sv"
        },
        {
            "module": "tb_top",
            "file": "example_tb/core/tb_top.sv"
        },
        {
            "module": "cv32e40p_aligner",
            "file": "rtl/cv32e40p_aligner.sv"
        },
        {
            "module": "cv32e40p_alu",
            "file": "rtl/cv32e40p_alu.sv"
        },
        {
            "module": "cv32e40p_alu_div",
            "file": "rtl/cv32e40p_alu_div.sv"
        },
        {
            "module": "cv32e40p_apu_disp",
            "file": "rtl/cv32e40p_apu_disp.sv"
        },
        {
            "module": "is",
            "file": "rtl/cv32e40p_compressed_decoder.sv"
        },
        {
            "module": "cv32e40p_compressed_decoder",
            "file": "rtl/cv32e40p_compressed_decoder.sv"
        },
        {
            "module": "cv32e40p_controller",
            "file": "rtl/cv32e40p_controller.sv"
        },
        {
            "module": "commands",
            "file": "rtl/cv32e40p_controller.sv"
        },
        {
            "module": "commands",
            "file": "rtl/cv32e40p_controller.sv"
        },
        {
            "module": "of",
            "file": "rtl/cv32e40p_core.sv"
        },
        {
            "module": "cv32e40p_core",
            "file": "rtl/cv32e40p_core.sv"
        },
        {
            "module": "cv32e40p_cs_registers",
            "file": "rtl/cv32e40p_cs_registers.sv"
        },
        {
            "module": "cv32e40p_decoder",
            "file": "rtl/cv32e40p_decoder.sv"
        },
        {
            "module": "cv32e40p_ex_stage",
            "file": "rtl/cv32e40p_ex_stage.sv"
        },
        {
            "module": "cv32e40p_ff_one",
            "file": "rtl/cv32e40p_ff_one.sv"
        },
        {
            "module": "cv32e40p_fifo",
            "file": "rtl/cv32e40p_fifo.sv"
        },
        {
            "module": "cv32e40p_fp_wrapper",
            "file": "rtl/cv32e40p_fp_wrapper.sv"
        },
        {
            "module": "cv32e40p_hwloop_regs",
            "file": "rtl/cv32e40p_hwloop_regs.sv"
        },
        {
            "module": "cv32e40p_id_stage",
            "file": "rtl/cv32e40p_id_stage.sv"
        },
        {
            "module": "cv32e40p_if_stage",
            "file": "rtl/cv32e40p_if_stage.sv"
        },
        {
            "module": "cv32e40p_int_controller",
            "file": "rtl/cv32e40p_int_controller.sv"
        },
        {
            "module": "cv32e40p_load_store_unit",
            "file": "rtl/cv32e40p_load_store_unit.sv"
        },
        {
            "module": "cv32e40p_mult",
            "file": "rtl/cv32e40p_mult.sv"
        },
        {
            "module": "cv32e40p_obi_interface",
            "file": "rtl/cv32e40p_obi_interface.sv"
        },
        {
            "module": "cv32e40p_popcnt",
            "file": "rtl/cv32e40p_popcnt.sv"
        },
        {
            "module": "cv32e40p_prefetch_buffer",
            "file": "rtl/cv32e40p_prefetch_buffer.sv"
        },
        {
            "module": "cv32e40p_prefetch_controller",
            "file": "rtl/cv32e40p_prefetch_controller.sv"
        },
        {
            "module": "cv32e40p_register_file",
            "file": "rtl/cv32e40p_register_file_ff.sv"
        },
        {
            "module": "cv32e40p_register_file",
            "file": "rtl/cv32e40p_register_file_latch.sv"
        },
        {
            "module": "cv32e40p_sleep_unit",
            "file": "rtl/cv32e40p_sleep_unit.sv"
        },
        {
            "module": "of",
            "file": "rtl/cv32e40p_top.sv"
        },
        {
            "module": "cv32e40p_top",
            "file": "rtl/cv32e40p_top.sv"
        },
        {
            "module": "parameter",
            "file": "rtl/include/cv32e40p_pkg.sv"
        },
        {
            "module": "checks",
            "file": "rtl/vendor/pulp_platform_common_cells/src/addr_decode.sv"
        },
        {
            "module": "addr_decode",
            "file": "rtl/vendor/pulp_platform_common_cells/src/addr_decode.sv"
        },
        {
            "module": "binary_to_gray",
            "file": "rtl/vendor/pulp_platform_common_cells/src/binary_to_gray.sv"
        },
        {
            "module": "implements",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cb_filter.sv"
        },
        {
            "module": "cb_filter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cb_filter.sv"
        },
        {
            "module": "hash_block",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cb_filter.sv"
        },
        {
            "module": "cdc_2phase",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_2phase.sv"
        },
        {
            "module": "cdc_2phase_src",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_2phase.sv"
        },
        {
            "module": "cdc_2phase_dst",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_2phase.sv"
        },
        {
            "module": "cdc_fifo_2phase",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_2phase.sv"
        },
        {
            "module": "cdc_fifo_gray",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv"
        },
        {
            "module": "cdc_fifo_gray_src",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv"
        },
        {
            "module": "cdc_fifo_gray_dst",
            "file": "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv"
        },
        {
            "module": "clk_div",
            "file": "rtl/vendor/pulp_platform_common_cells/src/clk_div.sv"
        },
        {
            "module": "counter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/counter.sv"
        },
        {
            "module": "delta_counter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/delta_counter.sv"
        },
        {
            "module": "receives",
            "file": "rtl/vendor/pulp_platform_common_cells/src/ecc_decode.sv"
        },
        {
            "module": "will",
            "file": "rtl/vendor/pulp_platform_common_cells/src/ecc_decode.sv"
        },
        {
            "module": "ecc_decode",
            "file": "rtl/vendor/pulp_platform_common_cells/src/ecc_decode.sv"
        },
        {
            "module": "receives",
            "file": "rtl/vendor/pulp_platform_common_cells/src/ecc_encode.sv"
        },
        {
            "module": "ecc_encode",
            "file": "rtl/vendor/pulp_platform_common_cells/src/ecc_encode.sv"
        },
        {
            "module": "edge_detect",
            "file": "rtl/vendor/pulp_platform_common_cells/src/edge_detect.sv"
        },
        {
            "module": "edge_propagator",
            "file": "rtl/vendor/pulp_platform_common_cells/src/edge_propagator.sv"
        },
        {
            "module": "edge_propagator_rx",
            "file": "rtl/vendor/pulp_platform_common_cells/src/edge_propagator_rx.sv"
        },
        {
            "module": "edge_propagator_tx",
            "file": "rtl/vendor/pulp_platform_common_cells/src/edge_propagator_tx.sv"
        },
        {
            "module": "exp_backoff",
            "file": "rtl/vendor/pulp_platform_common_cells/src/exp_backoff.sv"
        },
        {
            "module": "at",
            "file": "rtl/vendor/pulp_platform_common_cells/src/fall_through_register.sv"
        },
        {
            "module": "to",
            "file": "rtl/vendor/pulp_platform_common_cells/src/fall_through_register.sv"
        },
        {
            "module": "fall_through_register",
            "file": "rtl/vendor/pulp_platform_common_cells/src/fall_through_register.sv"
        },
        {
            "module": "fifo_v3",
            "file": "rtl/vendor/pulp_platform_common_cells/src/fifo_v3.sv"
        },
        {
            "module": "gray_to_binary",
            "file": "rtl/vendor/pulp_platform_common_cells/src/gray_to_binary.sv"
        },
        {
            "module": "id_queue",
            "file": "rtl/vendor/pulp_platform_common_cells/src/id_queue.sv"
        },
        {
            "module": "is",
            "file": "rtl/vendor/pulp_platform_common_cells/src/isochronous_spill_register.sv"
        },
        {
            "module": "isochronous_spill_register",
            "file": "rtl/vendor/pulp_platform_common_cells/src/isochronous_spill_register.sv"
        },
        {
            "module": "lfsr",
            "file": "rtl/vendor/pulp_platform_common_cells/src/lfsr.sv"
        },
        {
            "module": "lfsr_16bit",
            "file": "rtl/vendor/pulp_platform_common_cells/src/lfsr_16bit.sv"
        },
        {
            "module": "lfsr_8bit",
            "file": "rtl/vendor/pulp_platform_common_cells/src/lfsr_8bit.sv"
        },
        {
            "module": "lzc",
            "file": "rtl/vendor/pulp_platform_common_cells/src/lzc.sv"
        },
        {
            "module": "max_counter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/max_counter.sv"
        },
        {
            "module": "mv_filter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/mv_filter.sv"
        },
        {
            "module": "onehot_to_bin",
            "file": "rtl/vendor/pulp_platform_common_cells/src/onehot_to_bin.sv"
        },
        {
            "module": "plru_tree",
            "file": "rtl/vendor/pulp_platform_common_cells/src/plru_tree.sv"
        },
        {
            "module": "calculates",
            "file": "rtl/vendor/pulp_platform_common_cells/src/popcount.sv"
        },
        {
            "module": "pads",
            "file": "rtl/vendor/pulp_platform_common_cells/src/popcount.sv"
        },
        {
            "module": "popcount",
            "file": "rtl/vendor/pulp_platform_common_cells/src/popcount.sv"
        },
        {
            "module": "has",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "timing",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "the",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "also",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "the",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "rr_arb_tree",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv"
        },
        {
            "module": "rstgen",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rstgen.sv"
        },
        {
            "module": "is",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rstgen_bypass.sv"
        },
        {
            "module": "rstgen_bypass",
            "file": "rtl/vendor/pulp_platform_common_cells/src/rstgen_bypass.sv"
        },
        {
            "module": "serial_deglitch",
            "file": "rtl/vendor/pulp_platform_common_cells/src/serial_deglitch.sv"
        },
        {
            "module": "shift_reg",
            "file": "rtl/vendor/pulp_platform_common_cells/src/shift_reg.sv"
        },
        {
            "module": "spill_register",
            "file": "rtl/vendor/pulp_platform_common_cells/src/spill_register.sv"
        },
        {
            "module": "stream_arbiter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_arbiter.sv"
        },
        {
            "module": "stream_arbiter_flushable",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_arbiter_flushable.sv"
        },
        {
            "module": "stream_delay",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_delay.sv"
        },
        {
            "module": "has",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_demux.sv"
        },
        {
            "module": "stream_demux",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_demux.sv"
        },
        {
            "module": "stream_fifo",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_fifo.sv"
        },
        {
            "module": "stream_filter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_filter.sv"
        },
        {
            "module": "has",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_fork.sv"
        },
        {
            "module": "stream_fork",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_fork.sv"
        },
        {
            "module": "has",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_fork_dynamic.sv"
        },
        {
            "module": "stream_fork_dynamic",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_fork_dynamic.sv"
        },
        {
            "module": "stream_join",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_join.sv"
        },
        {
            "module": "stream_mux",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_mux.sv"
        },
        {
            "module": "stream_omega_net",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_omega_net.sv"
        },
        {
            "module": "will",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_omega_net.sv"
        },
        {
            "module": "stream_register",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_register.sv"
        },
        {
            "module": "stream_to_mem",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_to_mem.sv"
        },
        {
            "module": "stream_xbar",
            "file": "rtl/vendor/pulp_platform_common_cells/src/stream_xbar.sv"
        },
        {
            "module": "implements",
            "file": "rtl/vendor/pulp_platform_common_cells/src/sub_per_hash.sv"
        },
        {
            "module": "sub_per_hash",
            "file": "rtl/vendor/pulp_platform_common_cells/src/sub_per_hash.sv"
        },
        {
            "module": "sync",
            "file": "rtl/vendor/pulp_platform_common_cells/src/sync.sv"
        },
        {
            "module": "sync_wedge",
            "file": "rtl/vendor/pulp_platform_common_cells/src/sync_wedge.sv"
        },
        {
            "module": "unread",
            "file": "rtl/vendor/pulp_platform_common_cells/src/unread.sv"
        },
        {
            "module": "clock_divider",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/clock_divider.sv"
        },
        {
            "module": "clock_divider_counter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/clock_divider_counter.sv"
        },
        {
            "module": "fifo",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/fifo_v1.sv"
        },
        {
            "module": "fifo_v2",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/fifo_v2.sv"
        },
        {
            "module": "find_first_one",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/find_first_one.sv"
        },
        {
            "module": "generic_LFSR_8bit",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_LFSR_8bit.sv"
        },
        {
            "module": "generic_fifo",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_fifo.sv"
        },
        {
            "module": "generic_fifo_adv",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_fifo_adv.sv"
        },
        {
            "module": "prioarbiter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/prioarbiter.sv"
        },
        {
            "module": "pulp_sync",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/pulp_sync.sv"
        },
        {
            "module": "pulp_sync_wedge",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/pulp_sync_wedge.sv"
        },
        {
            "module": "rrarbiter",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/rrarbiter.sv"
        },
        {
            "module": "sram",
            "file": "rtl/vendor/pulp_platform_common_cells/src/deprecated/sram.sv"
        },
        {
            "module": "fpnew_cast_multi",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_cast_multi.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_cast_multi.sv"
        },
        {
            "module": "fpnew_classifier",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_classifier.sv"
        },
        {
            "module": "fpnew_divsqrt_multi",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_multi.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_multi.sv"
        },
        {
            "module": "fpnew_divsqrt_th_32",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_th_32.sv"
        },
        {
            "module": "end",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_th_32.sv"
        },
        {
            "module": "end",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_th_32.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_th_32.sv"
        },
        {
            "module": "fpnew_fma",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma.sv"
        },
        {
            "module": "fpnew_fma_multi",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma_multi.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma_multi.sv"
        },
        {
            "module": "fpnew_noncomp",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_noncomp.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_noncomp.sv"
        },
        {
            "module": "fpnew_opgroup_block",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_block.sv"
        },
        {
            "module": "fpnew_opgroup_fmt_slice",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_fmt_slice.sv"
        },
        {
            "module": "fpnew_opgroup_multifmt_slice",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_multifmt_slice.sv"
        },
        {
            "module": "outputs",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_multifmt_slice.sv"
        },
        {
            "module": "fpnew_rounding",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_rounding.sv"
        },
        {
            "module": "fpnew_top",
            "file": "rtl/vendor/pulp_platform_fpnew/src/fpnew_top.sv"
        },
        {
            "module": "cv32e40p_EX_assert",
            "file": "scripts/formal/src/cv32e40p_EX_assert.sv"
        },
        {
            "module": "cv32e40p_ID_assert",
            "file": "scripts/formal/src/cv32e40p_ID_assert.sv"
        },
        {
            "module": "cv32e40p_assert",
            "file": "scripts/formal/src/cv32e40p_assert.sv"
        },
        {
            "module": "cv32e40p_controller_assert",
            "file": "scripts/formal/src/cv32e40p_controller_assert.sv"
        },
        {
            "module": "cv32e40p_formal_top",
            "file": "scripts/formal/src/cv32e40p_formal_top.sv"
        },
        {
            "module": "data_assert",
            "file": "scripts/formal/src/data_assert.sv"
        },
        {
            "module": "debug_assert",
            "file": "scripts/formal/src/debug_assert.sv"
        },
        {
            "module": "fpnew_divsqrt_th_32_assert",
            "file": "scripts/formal/src/fpnew_divsqrt_th_32_assert.sv"
        },
        {
            "module": "insn_assert",
            "file": "scripts/formal/src/insn_assert.sv"
        },
        {
            "module": "interrput_assert",
            "file": "scripts/formal/src/interrupt_assert.sv"
        },
        {
            "module": "cv32e40p_wrapper",
            "file": "scripts/lint/cv32e40p_wrapper.sv"
        },
        {
            "module": "you",
            "file": "scripts/riscv_isa_formal/verif/vips/obi_dmem.sv"
        },
        {
            "module": "you",
            "file": "scripts/riscv_isa_formal/verif/vips/obi_imem.sv"
        },
        {
            "module": "data_assert",
            "file": "scripts/slec/tb_src/data_assert2.sv"
        },
        {
            "module": "insn_assert",
            "file": "scripts/slec/tb_src/insn_assert2.sv"
        },
        {
            "module": "cv32e40p_prefetch_controller_sva",
            "file": "sva/cv32e40p_prefetch_controller_sva.sv"
        }
    ],
    "module_graph": {
        "gated_clk_cell": [
            "pa_fdsu_ctrl",
            "pa_fdsu_ctrl",
            "pa_fdsu_ctrl",
            "pa_fdsu_ctrl",
            "pa_fdsu_round_single",
            "pa_fdsu_srt_single",
            "pa_fdsu_srt_single",
            "pa_fdsu_srt_single"
        ],
        "pa_fdsu_ctrl": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_ff1": [
            "pa_fdsu_prepare"
        ],
        "pa_fdsu_pack_single": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_prepare": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_round_single": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_special": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_srt_single": [
            "pa_fdsu_top"
        ],
        "pa_fdsu_top": [],
        "pa_fpu_dp": [
            "fpnew_divsqrt_th_32"
        ],
        "pa_fpu_frbus": [],
        "pa_fpu_src_type": [
            "pa_fpu_dp",
            "pa_fpu_dp",
            "pa_fpu_dp"
        ],
        "cv32e40p_apu_tracer": [
            "cv32e40p_tb_wrapper"
        ],
        "cv32e40p_core_log": [
            "cv32e40p_tb_wrapper"
        ],
        "cv32e40p_rvfi": [],
        "cv32e40p_rvfi_trace": [
            "cv32e40p_tb_wrapper"
        ],
        "cv32e40p_clock_gate": [
            "cv32e40p_register_file"
        ],
        "cv32e40p_tb_wrapper": [],
        "cv32e40p_tracer": [
            "cv32e40p_tb_wrapper"
        ],
        "needs": [],
        "amo_shim": [],
        "cv32e40p_fp_wrapper": [
            "of"
        ],
        "cv32e40p_random_interrupt_generator": [
            "to"
        ],
        "cv32e40p_tb_subsystem": [
            "cv32e40p_tb_subsystem"
        ],
        "dp_ram": [
            "to"
        ],
        "to": [
            "cv32e40p_prefetch_controller"
        ],
        "mm_ram": [
            "cv32e40p_tb_subsystem",
            "to"
        ],
        "for": [],
        "riscv_gnt_stall": [
            "to",
            "to"
        ],
        "code": [],
        "riscv_rvalid_stall": [
            "to"
        ],
        "tb_top": [
            "tb_top"
        ],
        "cv32e40p_aligner": [],
        "cv32e40p_alu": [],
        "cv32e40p_alu_div": [
            "cv32e40p_alu"
        ],
        "cv32e40p_apu_disp": [],
        "is": [
            "cv32e40p_alu",
            "cv32e40p_id_stage",
            "cv32e40p_sleep_unit"
        ],
        "cv32e40p_compressed_decoder": [
            "is",
            "cv32e40p_if_stage"
        ],
        "cv32e40p_controller": [
            "cv32e40p_id_stage"
        ],
        "commands": [],
        "of": [
            "cv32e40p_cs_registers",
            "cdc_2phase",
            "fpnew_fma",
            "fpnew_fma_multi"
        ],
        "cv32e40p_core": [],
        "cv32e40p_cs_registers": [
            "of"
        ],
        "cv32e40p_decoder": [
            "cv32e40p_id_stage"
        ],
        "cv32e40p_ex_stage": [
            "of"
        ],
        "cv32e40p_ff_one": [],
        "cv32e40p_fifo": [
            "cv32e40p_prefetch_buffer"
        ],
        "cv32e40p_hwloop_regs": [],
        "cv32e40p_id_stage": [
            "of"
        ],
        "cv32e40p_if_stage": [
            "of"
        ],
        "cv32e40p_int_controller": [],
        "cv32e40p_load_store_unit": [
            "of",
            "cv32e40p_load_store_unit"
        ],
        "cv32e40p_mult": [
            "cv32e40p_ex_stage"
        ],
        "cv32e40p_obi_interface": [],
        "cv32e40p_popcnt": [],
        "cv32e40p_prefetch_buffer": [
            "cv32e40p_prefetch_buffer"
        ],
        "cv32e40p_prefetch_controller": [],
        "cv32e40p_register_file": [
            "cv32e40p_id_stage"
        ],
        "cv32e40p_sleep_unit": [],
        "cv32e40p_top": [
            "cv32e40p_tb_wrapper",
            "of",
            "cv32e40p_formal_top",
            "cv32e40p_wrapper"
        ],
        "parameter": [],
        "checks": [],
        "addr_decode": [],
        "binary_to_gray": [
            "cdc_fifo_gray",
            "cdc_fifo_gray"
        ],
        "implements": [],
        "cb_filter": [
            "implements"
        ],
        "hash_block": [
            "implements",
            "implements",
            "implements"
        ],
        "cdc_2phase": [
            "cdc_fifo_2phase"
        ],
        "cdc_2phase_src": [
            "cdc_2phase"
        ],
        "cdc_2phase_dst": [
            "cdc_2phase"
        ],
        "cdc_fifo_2phase": [
            "cdc_fifo_2phase"
        ],
        "cdc_fifo_gray": [],
        "cdc_fifo_gray_src": [
            "cdc_fifo_gray"
        ],
        "cdc_fifo_gray_dst": [
            "cdc_fifo_gray"
        ],
        "clk_div": [],
        "counter": [
            "cv32e40p_cs_registers",
            "implements",
            "counter",
            "has",
            "stream_delay"
        ],
        "delta_counter": [],
        "receives": [],
        "will": [],
        "ecc_decode": [],
        "ecc_encode": [],
        "edge_detect": [],
        "edge_propagator": [],
        "edge_propagator_rx": [],
        "edge_propagator_tx": [],
        "exp_backoff": [],
        "at": [],
        "fall_through_register": [
            "at"
        ],
        "fifo_v3": [],
        "gray_to_binary": [
            "cdc_fifo_gray",
            "cdc_fifo_gray",
            "cdc_fifo_gray",
            "cdc_fifo_gray"
        ],
        "id_queue": [],
        "isochronous_spill_register": [],
        "lfsr": [],
        "lfsr_16bit": [],
        "lfsr_8bit": [],
        "lzc": [
            "has",
            "fpnew_cast_multi"
        ],
        "max_counter": [
            "max_counter"
        ],
        "mv_filter": [],
        "onehot_to_bin": [
            "id_queue"
        ],
        "plru_tree": [],
        "calculates": [],
        "pads": [],
        "popcount": [
            "calculates"
        ],
        "has": [],
        "timing": [],
        "the": [
            "checks",
            "stream_xbar"
        ],
        "also": [],
        "rr_arb_tree": [
            "fpnew_opgroup_block",
            "fpnew_top"
        ],
        "rstgen": [],
        "rstgen_bypass": [
            "rstgen"
        ],
        "serial_deglitch": [],
        "shift_reg": [],
        "spill_register": [
            "cdc_fifo_gray",
            "stream_xbar"
        ],
        "stream_arbiter": [],
        "stream_arbiter_flushable": [
            "stream_arbiter"
        ],
        "stream_delay": [],
        "stream_demux": [],
        "stream_fifo": [
            "stream_fifo",
            "stream_to_mem"
        ],
        "stream_filter": [],
        "stream_fork": [],
        "stream_fork_dynamic": [],
        "stream_join": [],
        "stream_mux": [],
        "stream_omega_net": [
            "stream_omega_net"
        ],
        "stream_register": [
            "stream_register"
        ],
        "stream_to_mem": [],
        "stream_xbar": [
            "stream_xbar"
        ],
        "sub_per_hash": [],
        "sync": [],
        "sync_wedge": [
            "edge_detect",
            "sync_wedge"
        ],
        "unread": [],
        "clock_divider": [
            "clock_divider"
        ],
        "clock_divider_counter": [],
        "fifo": [
            "fifo"
        ],
        "fifo_v2": [
            "fifo_v2"
        ],
        "find_first_one": [],
        "generic_LFSR_8bit": [],
        "generic_fifo": [],
        "generic_fifo_adv": [],
        "prioarbiter": [
            "prioarbiter"
        ],
        "pulp_sync": [],
        "pulp_sync_wedge": [
            "edge_propagator_rx",
            "pulp_sync_wedge"
        ],
        "rrarbiter": [
            "rrarbiter"
        ],
        "sram": [],
        "fpnew_cast_multi": [
            "fpnew_cast_multi"
        ],
        "outputs": [],
        "fpnew_classifier": [],
        "fpnew_divsqrt_multi": [
            "fpnew_opgroup_multifmt_slice"
        ],
        "fpnew_divsqrt_th_32": [],
        "end": [
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_rvfi",
            "cv32e40p_tracer",
            "cv32e40p_tracer",
            "lzc",
            "stream_omega_net",
            "stream_omega_net",
            "stream_xbar",
            "stream_xbar",
            "generic_fifo",
            "generic_fifo_adv"
        ],
        "fpnew_fma": [
            "fpnew_fma"
        ],
        "fpnew_fma_multi": [
            "fpnew_fma_multi"
        ],
        "fpnew_noncomp": [
            "fpnew_noncomp"
        ],
        "fpnew_opgroup_block": [
            "fpnew_opgroup_block"
        ],
        "fpnew_opgroup_fmt_slice": [
            "fpnew_opgroup_fmt_slice"
        ],
        "fpnew_opgroup_multifmt_slice": [
            "fpnew_opgroup_block",
            "fpnew_opgroup_multifmt_slice"
        ],
        "fpnew_rounding": [
            "fpnew_fma"
        ],
        "fpnew_top": [
            "fpnew_top"
        ],
        "cv32e40p_EX_assert": [],
        "cv32e40p_ID_assert": [],
        "cv32e40p_assert": [],
        "cv32e40p_controller_assert": [],
        "cv32e40p_formal_top": [],
        "data_assert": [],
        "debug_assert": [],
        "fpnew_divsqrt_th_32_assert": [],
        "insn_assert": [],
        "interrput_assert": [],
        "cv32e40p_wrapper": [],
        "you": [],
        "cv32e40p_prefetch_controller_sva": [
            "cv32e40p_tb_wrapper"
        ]
    },
    "module_graph_inverse": {
        "gated_clk_cell": [],
        "pa_fdsu_ctrl": [
            "gated_clk_cell",
            "gated_clk_cell",
            "gated_clk_cell",
            "gated_clk_cell"
        ],
        "pa_fdsu_ff1": [],
        "pa_fdsu_pack_single": [],
        "pa_fdsu_prepare": [
            "pa_fdsu_ff1"
        ],
        "pa_fdsu_round_single": [
            "gated_clk_cell"
        ],
        "pa_fdsu_special": [],
        "pa_fdsu_srt_single": [
            "gated_clk_cell",
            "gated_clk_cell",
            "gated_clk_cell"
        ],
        "pa_fdsu_top": [
            "pa_fdsu_special",
            "pa_fdsu_prepare",
            "pa_fdsu_srt_single",
            "pa_fdsu_round_single",
            "pa_fdsu_pack_single",
            "pa_fdsu_ctrl"
        ],
        "pa_fpu_dp": [
            "pa_fpu_src_type",
            "pa_fpu_src_type",
            "pa_fpu_src_type"
        ],
        "pa_fpu_frbus": [],
        "pa_fpu_src_type": [],
        "cv32e40p_apu_tracer": [],
        "cv32e40p_core_log": [],
        "cv32e40p_rvfi": [
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end",
            "end"
        ],
        "cv32e40p_rvfi_trace": [],
        "cv32e40p_clock_gate": [],
        "cv32e40p_tb_wrapper": [
            "cv32e40p_prefetch_controller_sva",
            "cv32e40p_core_log",
            "cv32e40p_apu_tracer",
            "cv32e40p_tracer",
            "cv32e40p_rvfi_trace",
            "cv32e40p_top"
        ],
        "cv32e40p_tracer": [
            "end",
            "end"
        ],
        "needs": [],
        "amo_shim": [],
        "cv32e40p_fp_wrapper": [],
        "cv32e40p_random_interrupt_generator": [],
        "cv32e40p_tb_subsystem": [
            "cv32e40p_tb_subsystem",
            "mm_ram"
        ],
        "dp_ram": [],
        "to": [
            "mm_ram",
            "dp_ram",
            "riscv_rvalid_stall",
            "riscv_gnt_stall",
            "riscv_gnt_stall",
            "cv32e40p_random_interrupt_generator"
        ],
        "mm_ram": [],
        "for": [],
        "riscv_gnt_stall": [],
        "code": [],
        "riscv_rvalid_stall": [],
        "tb_top": [
            "tb_top"
        ],
        "cv32e40p_aligner": [],
        "cv32e40p_alu": [
            "is",
            "cv32e40p_alu_div"
        ],
        "cv32e40p_alu_div": [],
        "cv32e40p_apu_disp": [],
        "is": [
            "cv32e40p_compressed_decoder"
        ],
        "cv32e40p_compressed_decoder": [],
        "cv32e40p_controller": [],
        "commands": [],
        "of": [
            "cv32e40p_if_stage",
            "cv32e40p_id_stage",
            "cv32e40p_ex_stage",
            "cv32e40p_load_store_unit",
            "cv32e40p_cs_registers",
            "cv32e40p_top",
            "cv32e40p_fp_wrapper"
        ],
        "cv32e40p_core": [],
        "cv32e40p_cs_registers": [
            "of",
            "counter"
        ],
        "cv32e40p_decoder": [],
        "cv32e40p_ex_stage": [
            "cv32e40p_mult"
        ],
        "cv32e40p_ff_one": [],
        "cv32e40p_fifo": [],
        "cv32e40p_hwloop_regs": [],
        "cv32e40p_id_stage": [
            "cv32e40p_register_file",
            "cv32e40p_decoder",
            "cv32e40p_controller",
            "is"
        ],
        "cv32e40p_if_stage": [
            "cv32e40p_compressed_decoder"
        ],
        "cv32e40p_int_controller": [],
        "cv32e40p_load_store_unit": [
            "cv32e40p_load_store_unit"
        ],
        "cv32e40p_mult": [],
        "cv32e40p_obi_interface": [],
        "cv32e40p_popcnt": [],
        "cv32e40p_prefetch_buffer": [
            "cv32e40p_prefetch_buffer",
            "cv32e40p_fifo"
        ],
        "cv32e40p_prefetch_controller": [
            "to"
        ],
        "cv32e40p_register_file": [
            "cv32e40p_clock_gate"
        ],
        "cv32e40p_sleep_unit": [
            "is"
        ],
        "cv32e40p_top": [],
        "parameter": [],
        "checks": [
            "the"
        ],
        "addr_decode": [],
        "binary_to_gray": [],
        "implements": [
            "cb_filter",
            "hash_block",
            "hash_block",
            "counter",
            "hash_block"
        ],
        "cb_filter": [],
        "hash_block": [],
        "cdc_2phase": [
            "of",
            "cdc_2phase_src",
            "cdc_2phase_dst"
        ],
        "cdc_2phase_src": [],
        "cdc_2phase_dst": [],
        "cdc_fifo_2phase": [
            "cdc_fifo_2phase",
            "cdc_2phase"
        ],
        "cdc_fifo_gray": [
            "cdc_fifo_gray_src",
            "cdc_fifo_gray_dst",
            "gray_to_binary",
            "gray_to_binary",
            "binary_to_gray",
            "gray_to_binary",
            "binary_to_gray",
            "gray_to_binary",
            "spill_register"
        ],
        "cdc_fifo_gray_src": [],
        "cdc_fifo_gray_dst": [],
        "clk_div": [],
        "counter": [
            "counter"
        ],
        "delta_counter": [],
        "receives": [],
        "will": [],
        "ecc_decode": [],
        "ecc_encode": [],
        "edge_detect": [
            "sync_wedge"
        ],
        "edge_propagator": [],
        "edge_propagator_rx": [
            "pulp_sync_wedge"
        ],
        "edge_propagator_tx": [],
        "exp_backoff": [],
        "at": [
            "fall_through_register"
        ],
        "fall_through_register": [],
        "fifo_v3": [],
        "gray_to_binary": [],
        "id_queue": [
            "onehot_to_bin"
        ],
        "isochronous_spill_register": [],
        "lfsr": [],
        "lfsr_16bit": [],
        "lfsr_8bit": [],
        "lzc": [
            "end"
        ],
        "max_counter": [
            "max_counter"
        ],
        "mv_filter": [],
        "onehot_to_bin": [],
        "plru_tree": [],
        "calculates": [
            "popcount"
        ],
        "pads": [],
        "popcount": [],
        "has": [
            "counter",
            "lzc"
        ],
        "timing": [],
        "the": [],
        "also": [],
        "rr_arb_tree": [],
        "rstgen": [
            "rstgen_bypass"
        ],
        "rstgen_bypass": [],
        "serial_deglitch": [],
        "shift_reg": [],
        "spill_register": [],
        "stream_arbiter": [
            "stream_arbiter_flushable"
        ],
        "stream_arbiter_flushable": [],
        "stream_delay": [
            "counter"
        ],
        "stream_demux": [],
        "stream_fifo": [
            "stream_fifo"
        ],
        "stream_filter": [],
        "stream_fork": [],
        "stream_fork_dynamic": [],
        "stream_join": [],
        "stream_mux": [],
        "stream_omega_net": [
            "stream_omega_net",
            "end",
            "end"
        ],
        "stream_register": [
            "stream_register"
        ],
        "stream_to_mem": [
            "stream_fifo"
        ],
        "stream_xbar": [
            "stream_xbar",
            "spill_register",
            "the",
            "end",
            "end"
        ],
        "sub_per_hash": [],
        "sync": [],
        "sync_wedge": [
            "sync_wedge"
        ],
        "unread": [],
        "clock_divider": [
            "clock_divider"
        ],
        "clock_divider_counter": [],
        "fifo": [
            "fifo"
        ],
        "fifo_v2": [
            "fifo_v2"
        ],
        "find_first_one": [],
        "generic_LFSR_8bit": [],
        "generic_fifo": [
            "end"
        ],
        "generic_fifo_adv": [
            "end"
        ],
        "prioarbiter": [
            "prioarbiter"
        ],
        "pulp_sync": [],
        "pulp_sync_wedge": [
            "pulp_sync_wedge"
        ],
        "rrarbiter": [
            "rrarbiter"
        ],
        "sram": [],
        "fpnew_cast_multi": [
            "fpnew_cast_multi",
            "lzc"
        ],
        "outputs": [],
        "fpnew_classifier": [],
        "fpnew_divsqrt_multi": [],
        "fpnew_divsqrt_th_32": [
            "pa_fpu_dp"
        ],
        "end": [],
        "fpnew_fma": [
            "fpnew_fma",
            "of",
            "fpnew_rounding"
        ],
        "fpnew_fma_multi": [
            "fpnew_fma_multi",
            "of"
        ],
        "fpnew_noncomp": [
            "fpnew_noncomp"
        ],
        "fpnew_opgroup_block": [
            "fpnew_opgroup_block",
            "fpnew_opgroup_multifmt_slice",
            "rr_arb_tree"
        ],
        "fpnew_opgroup_fmt_slice": [
            "fpnew_opgroup_fmt_slice"
        ],
        "fpnew_opgroup_multifmt_slice": [
            "fpnew_opgroup_multifmt_slice",
            "fpnew_divsqrt_multi"
        ],
        "fpnew_rounding": [],
        "fpnew_top": [
            "fpnew_top",
            "rr_arb_tree"
        ],
        "cv32e40p_EX_assert": [],
        "cv32e40p_ID_assert": [],
        "cv32e40p_assert": [],
        "cv32e40p_controller_assert": [],
        "cv32e40p_formal_top": [
            "cv32e40p_top"
        ],
        "data_assert": [],
        "debug_assert": [],
        "fpnew_divsqrt_th_32_assert": [],
        "insn_assert": [],
        "interrput_assert": [],
        "cv32e40p_wrapper": [
            "cv32e40p_top"
        ],
        "you": [],
        "cv32e40p_prefetch_controller_sva": []
    },
    "non_tb_files": [
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl/gated_clk_cell.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ctrl.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ff1.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_pack_single.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_prepare.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_round_single.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_special.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_srt_single.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_top.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_dp.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_frbus.v",
        "rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_src_type.v",
        "bhv/cv32e40p_apu_tracer.sv",
        "bhv/cv32e40p_core_log.sv",
        "bhv/cv32e40p_rvfi.sv",
        "bhv/cv32e40p_rvfi_trace.sv",
        "bhv/cv32e40p_sim_clock_gate.sv",
        "bhv/cv32e40p_tracer.sv",
        "bhv/insn_trace.sv",
        "bhv/pipe_freeze_trace.sv",
        "bhv/include/cv32e40p_rvfi_pkg.sv",
        "bhv/include/cv32e40p_tracer_pkg.sv",
        "rtl/cv32e40p_aligner.sv",
        "rtl/cv32e40p_alu.sv",
        "rtl/cv32e40p_alu_div.sv",
        "rtl/cv32e40p_apu_disp.sv",
        "rtl/cv32e40p_compressed_decoder.sv",
        "rtl/cv32e40p_controller.sv",
        "rtl/cv32e40p_core.sv",
        "rtl/cv32e40p_cs_registers.sv",
        "rtl/cv32e40p_decoder.sv",
        "rtl/cv32e40p_ex_stage.sv",
        "rtl/cv32e40p_ff_one.sv",
        "rtl/cv32e40p_fifo.sv",
        "rtl/cv32e40p_fp_wrapper.sv",
        "rtl/cv32e40p_hwloop_regs.sv",
        "rtl/cv32e40p_id_stage.sv",
        "rtl/cv32e40p_if_stage.sv",
        "rtl/cv32e40p_int_controller.sv",
        "rtl/cv32e40p_load_store_unit.sv",
        "rtl/cv32e40p_mult.sv",
        "rtl/cv32e40p_obi_interface.sv",
        "rtl/cv32e40p_popcnt.sv",
        "rtl/cv32e40p_prefetch_buffer.sv",
        "rtl/cv32e40p_prefetch_controller.sv",
        "rtl/cv32e40p_register_file_ff.sv",
        "rtl/cv32e40p_register_file_latch.sv",
        "rtl/cv32e40p_sleep_unit.sv",
        "rtl/cv32e40p_top.sv",
        "rtl/include/cv32e40p_apu_core_pkg.sv",
        "rtl/include/cv32e40p_fpu_pkg.sv",
        "rtl/include/cv32e40p_pkg.sv",
        "rtl/vendor/pulp_platform_common_cells/src/addr_decode.sv",
        "rtl/vendor/pulp_platform_common_cells/src/binary_to_gray.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cb_filter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cb_filter_pkg.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cdc_2phase.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_2phase.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv",
        "rtl/vendor/pulp_platform_common_cells/src/cf_math_pkg.sv",
        "rtl/vendor/pulp_platform_common_cells/src/clk_div.sv",
        "rtl/vendor/pulp_platform_common_cells/src/counter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/delta_counter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/ecc_decode.sv",
        "rtl/vendor/pulp_platform_common_cells/src/ecc_encode.sv",
        "rtl/vendor/pulp_platform_common_cells/src/ecc_pkg.sv",
        "rtl/vendor/pulp_platform_common_cells/src/edge_detect.sv",
        "rtl/vendor/pulp_platform_common_cells/src/edge_propagator.sv",
        "rtl/vendor/pulp_platform_common_cells/src/edge_propagator_rx.sv",
        "rtl/vendor/pulp_platform_common_cells/src/edge_propagator_tx.sv",
        "rtl/vendor/pulp_platform_common_cells/src/exp_backoff.sv",
        "rtl/vendor/pulp_platform_common_cells/src/fall_through_register.sv",
        "rtl/vendor/pulp_platform_common_cells/src/fifo_v3.sv",
        "rtl/vendor/pulp_platform_common_cells/src/gray_to_binary.sv",
        "rtl/vendor/pulp_platform_common_cells/src/id_queue.sv",
        "rtl/vendor/pulp_platform_common_cells/src/isochronous_spill_register.sv",
        "rtl/vendor/pulp_platform_common_cells/src/lfsr.sv",
        "rtl/vendor/pulp_platform_common_cells/src/lfsr_16bit.sv",
        "rtl/vendor/pulp_platform_common_cells/src/lfsr_8bit.sv",
        "rtl/vendor/pulp_platform_common_cells/src/lzc.sv",
        "rtl/vendor/pulp_platform_common_cells/src/max_counter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/mv_filter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/onehot_to_bin.sv",
        "rtl/vendor/pulp_platform_common_cells/src/plru_tree.sv",
        "rtl/vendor/pulp_platform_common_cells/src/popcount.sv",
        "rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv",
        "rtl/vendor/pulp_platform_common_cells/src/rstgen.sv",
        "rtl/vendor/pulp_platform_common_cells/src/rstgen_bypass.sv",
        "rtl/vendor/pulp_platform_common_cells/src/serial_deglitch.sv",
        "rtl/vendor/pulp_platform_common_cells/src/shift_reg.sv",
        "rtl/vendor/pulp_platform_common_cells/src/spill_register.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_arbiter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_arbiter_flushable.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_delay.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_demux.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_fifo.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_filter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_fork.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_fork_dynamic.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_intf.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_join.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_mux.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_omega_net.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_register.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_to_mem.sv",
        "rtl/vendor/pulp_platform_common_cells/src/stream_xbar.sv",
        "rtl/vendor/pulp_platform_common_cells/src/sub_per_hash.sv",
        "rtl/vendor/pulp_platform_common_cells/src/sync.sv",
        "rtl/vendor/pulp_platform_common_cells/src/sync_wedge.sv",
        "rtl/vendor/pulp_platform_common_cells/src/unread.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/clock_divider.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/clock_divider_counter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/fifo_v1.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/fifo_v2.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/find_first_one.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_LFSR_8bit.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_fifo.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/generic_fifo_adv.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/prioarbiter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/pulp_sync.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/pulp_sync_wedge.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/rrarbiter.sv",
        "rtl/vendor/pulp_platform_common_cells/src/deprecated/sram.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_cast_multi.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_classifier.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_multi.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_divsqrt_th_32.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_fma_multi.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_noncomp.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_block.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_fmt_slice.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_opgroup_multifmt_slice.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_pkg.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_rounding.sv",
        "rtl/vendor/pulp_platform_fpnew/src/fpnew_top.sv",
        "scripts/formal/src/cv32e40p_EX_assert.sv",
        "scripts/formal/src/cv32e40p_ID_assert.sv",
        "scripts/formal/src/cv32e40p_assert.sv",
        "scripts/formal/src/cv32e40p_bind.sv",
        "scripts/formal/src/cv32e40p_controller_assert.sv",
        "scripts/formal/src/cv32e40p_formal_top.sv",
        "scripts/formal/src/data_assert.sv",
        "scripts/formal/src/debug_assert.sv",
        "scripts/formal/src/fpnew_divsqrt_th_32_assert.sv",
        "scripts/formal/src/insn_assert.sv",
        "scripts/formal/src/interrupt_assert.sv",
        "scripts/lint/cv32e40p_wrapper.sv",
        "scripts/lint/config_0p_0f_0z_0lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_0f_0z_0lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_0z_0lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_0z_1lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_0z_2lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_1z_0lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_1z_1lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_1z_2lat_0c/cv32e40p_config_pkg.sv",
        "scripts/lint/config_1p_1f_1z_2lat_1c/cv32e40p_config_pkg.sv",
        "sva/cv32e40p_prefetch_controller_sva.sv"
    ]
}